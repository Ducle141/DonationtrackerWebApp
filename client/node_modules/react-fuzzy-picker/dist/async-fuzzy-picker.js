'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _fuzzyPicker = require('./fuzzy-picker');

var _fuzzyPicker2 = _interopRequireDefault(_fuzzyPicker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AsyncFuzzyPicker = function (_FuzzyPicker) {
  _inherits(AsyncFuzzyPicker, _FuzzyPicker);

  function AsyncFuzzyPicker() {
    _classCallCheck(this, AsyncFuzzyPicker);

    return _possibleConstructorReturn(this, (AsyncFuzzyPicker.__proto__ || Object.getPrototypeOf(AsyncFuzzyPicker)).apply(this, arguments));
  }

  _createClass(AsyncFuzzyPicker, [{
    key: 'onInputChanged',

    // Since we're fetching async, fetch the new items to show.
    value: function onInputChanged(_ref) {
      var _this2 = this;

      var value = _ref.target.value;

      return this.props.fetchItems(content).then(function (items) {
        if (Array.isArray(items)) {
          _this2.setState({ items: items });
        } else {
          throw new Error('Resolved data isn\'t an array, and react-fuzzy-picker expects an array of strings to be resolved - like ["foo", "bar", "baz"]');
        }
      });
    }
  }]);

  return AsyncFuzzyPicker;
}(_fuzzyPicker2.default);

exports.default = AsyncFuzzyPicker;

AsyncFuzzyPicker.propTypes = Object.assign({}, _fuzzyPicker2.default.PropTypes, {
  fetchItems: _propTypes2.default.func.isRequired
});
delete AsyncFuzzyPicker.propTypes.items; // reset the value of items since that isn't needed here.
AsyncFuzzyPicker.defaultProps = Object.assign({}, _fuzzyPicker2.default.defaultProps, {
  // by default, don't show any items.
  fetchItems: function fetchItems() {
    return Promise.resolve([]);
  }
});