'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FuzzyWrapper = function (_React$Component) {
  _inherits(FuzzyWrapper, _React$Component);

  function FuzzyWrapper(props) {
    _classCallCheck(this, FuzzyWrapper);

    var _this = _possibleConstructorReturn(this, (FuzzyWrapper.__proto__ || Object.getPrototypeOf(FuzzyWrapper)).call(this));

    _this.state = {
      isOpen: false
    };

    // create a bound function to invoke when keys are pressed on the body.
    _this.keyEvent = function (event) {
      if (this.props.isKeyPressed(event)) {
        event.preventDefault();
        this.setState({ isOpen: !this.state.isOpen });
      }
    }.bind(_this);
    return _this;
  }

  _createClass(FuzzyWrapper, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      document.body.addEventListener('keydown', this.keyEvent);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.body.removeEventListener('keydown', this.keyEvent);
    }

    // Called by the containing fuzzysearcher to close itself.

  }, {
    key: 'onClose',
    value: function onClose() {
      this.setState({ isOpen: false });
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.popup(this.state.isOpen, this.onClose.bind(this));
    }
  }]);

  return FuzzyWrapper;
}(_react2.default.Component);

exports.default = FuzzyWrapper;

FuzzyWrapper.propTypes = {
  isKeyPressed: _propTypes2.default.func.isRequired,
  popup: _propTypes2.default.func.isRequired
};
FuzzyWrapper.defaultProps = {
  isKeyPressed: function isKeyPressed() {
    return false;
  },
  popup: function popup() {
    return null;
  }
};