'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _fuzzysearch = require('fuzzysearch');

var _fuzzysearch2 = _interopRequireDefault(_fuzzysearch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FuzzyPicker = function (_React$Component) {
  _inherits(FuzzyPicker, _React$Component);

  function FuzzyPicker(props) {
    _classCallCheck(this, FuzzyPicker);

    var _this = _possibleConstructorReturn(this, (FuzzyPicker.__proto__ || Object.getPrototypeOf(FuzzyPicker)).call(this));

    _this.state = {
      selectedIndex: 0, // which item is selected?
      items: _this.getInitialItems(props) // the items wich are displayed in the fuzzy find list
    };
    return _this;
  }

  // Move the selected index up or down.


  _createClass(FuzzyPicker, [{
    key: 'onMoveUp',
    value: function onMoveUp() {
      if (this.state.selectedIndex > 0) {
        this.selectIndex(--this.state.selectedIndex);

        // User is at the start of the list. Should we cycle back to the end again?
      } else if (this.props.cycleAtEndsOfList) {
        this.selectIndex(this.state.items.length - 1);
      }
    }
  }, {
    key: 'onMoveDown',
    value: function onMoveDown() {
      var itemsLength = this.state.items.length - 1;
      if (this.state.selectedIndex < itemsLength) {
        this.selectIndex(++this.state.selectedIndex);

        // User is at the end of the list. Should we cycle back to the start again?
      } else if (this.props.cycleAtEndsOfList) {
        this.selectIndex(0);
      }
    }

    // handle key events in the textbox

  }, {
    key: 'onKeyDown',
    value: function onKeyDown(event) {
      switch (event.key) {
        // Moving up and down
        // Either arrow keys, tab/shift+tab, or ctrl+j/ctrl+k (what's used in vim sometimes)
        case 'ArrowUp':
          {
            this.onMoveUp();
            event.preventDefault();
            break;
          }
        case 'ArrowDown':
          {
            this.onMoveDown();
            event.preventDefault();
            break;
          }
        case 'j':
          {
            if (event.ctrlKey) {
              this.onMoveDown();
            }
            break;
          }
        case 'k':
          {
            if (event.ctrlKey) {
              this.onMoveUp();
            }
            break;
          }
        case 'Tab':
          {
            if (event.shiftKey) {
              this.onMoveUp();
            } else {
              this.onMoveDown();
            }
            event.preventDefault();
            break;
          }

        case 'Enter':
          {
            // Enter key
            var item = this.state.items[this.state.selectedIndex];
            if (item) {
              this.setState({ items: this.getInitialItems(this.props) });
              this.props.onChange(item);
              if (this.props.autoCloseOnEnter) {
                this.props.onClose();
              }
            }
            break;
          }
        case 'Escape':
          {
            this.setState({ items: this.getInitialItems(this.props) });
            this.props.onClose();
          }
      }
    }

    // Get the list of initial items.
    // Defaults to none, but the 'showAllItems' property can be enabled
    // to show all items by default.

  }, {
    key: 'getInitialItems',
    value: function getInitialItems(props) {
      if (props.showAllItems) {
        return props.items;
      } else {
        return [];
      }
    }

    // When the user types into the textbox, this handler is called.
    // Though the textbox is an uncontrolled input, this is needed to regenerate the
    // list of choices under the textbox.

  }, {
    key: 'onInputChanged',
    value: function onInputChanged(_ref) {
      var _this2 = this;

      var value = _ref.target.value;

      if (value.length) {
        // Pick the closest matching items if possible.
        var items = this.props.items.filter(function (item) {
          return (0, _fuzzysearch2.default)(value.toLowerCase(), _this2.props.itemValue(item).toLowerCase());
        });
        this.setState({ items: items.slice(0, this.props.displayCount), selectedIndex: 0 });
      } else {
        // initially, show an empty picker or all items.
        this.setState({ items: this.getInitialItems(this.props), selectedIndex: 0 });
      }
    }

    // Highlight the given item

  }, {
    key: 'selectIndex',
    value: function selectIndex(ct) {
      this.props.onChangeHighlightedItem(this.state.items[ct]); // fire a callback
      this.setState({ selectedIndex: ct }); // update the state for real
    }
  }, {
    key: 'onClickOnBg',
    value: function onClickOnBg(event) {
      if (event.target.className === 'fuzzy-switcher-background') {
        this.props.onClose();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (this.props.isOpen) {
        return _react2.default.createElement(
          'div',
          { className: 'fuzzy-picker-background', onClick: this.onClickOnBg.bind(this) },
          _react2.default.createElement(
            'div',
            { className: 'fuzzy-picker' },
            _react2.default.createElement(
              'span',
              { className: 'fuzzy-picker-top-text' },
              _react2.default.createElement(
                'span',
                { className: 'fuzzy-picker-label' },
                this.props.label
              ),
              _react2.default.createElement(
                'span',
                { className: 'fuzzy-picker-instructions' },
                _react2.default.createElement(
                  'span',
                  null,
                  _react2.default.createElement(
                    'strong',
                    null,
                    'tab'
                  ),
                  ' or ',
                  _react2.default.createElement(
                    'strong',
                    null,
                    '\u2191\u2193'
                  ),
                  ' to navigate'
                ),
                _react2.default.createElement(
                  'span',
                  null,
                  _react2.default.createElement(
                    'strong',
                    null,
                    'tab'
                  ),
                  ' or ',
                  _react2.default.createElement(
                    'strong',
                    null,
                    '??'
                  ),
                  ' to navigate'
                ),
                _react2.default.createElement(
                  'span',
                  null,
                  _react2.default.createElement(
                    'strong',
                    null,
                    'enter'
                  ),
                  ' to select'
                ),
                _react2.default.createElement(
                  'span',
                  null,
                  _react2.default.createElement(
                    'strong',
                    null,
                    'esc'
                  ),
                  ' to dismiss'
                )
              )
            ),
            _react2.default.createElement('input', {
              type: 'text',
              className: 'fuzzy-input',
              autoFocus: true,
              onKeyDown: this.onKeyDown.bind(this),
              onChange: this.onInputChanged.bind(this)
            }),
            _react2.default.createElement(
              'ul',
              { className: 'fuzzy-items' },
              this.state.items.map(function (item, ct) {
                // render each item
                return _react2.default.createElement(
                  'li',
                  {
                    key: _this3.props.itemValue(item),
                    className: (0, _classnames2.default)({
                      selected: ct === _this3.state.selectedIndex
                    }),
                    onMouseOver: _this3.selectIndex.bind(_this3, ct),
                    onClick: _this3.props.onChange.bind(_this3, _this3.state.items[ct])
                  },
                  _this3.props.renderItem(item)
                );
              })
            )
          )
        );
      } else {
        return null;
      }
    }
  }]);

  return FuzzyPicker;
}(_react2.default.Component);

exports.default = FuzzyPicker;

FuzzyPicker.propTypes = {
  items: _propTypes2.default.arrayOf(_propTypes2.default.any).isRequired,
  showAllItems: _propTypes2.default.bool,
  label: _propTypes2.default.string,
  displayCount: _propTypes2.default.number,
  cycleAtEndsOfList: _propTypes2.default.bool,
  onChangeHighlightedItem: _propTypes2.default.func,
  onChange: _propTypes2.default.func,
  onClose: _propTypes2.default.func,
  autoCloseOnEnter: _propTypes2.default.bool,

  renderItem: _propTypes2.default.func,
  itemValue: _propTypes2.default.func
};
FuzzyPicker.defaultProps = {
  showAllItems: false,
  label: 'Search', // The text above the searchbox that describes what's happening
  displayCount: 5, // How many items to display at once
  cycleAtEndsOfList: true, // When a user arrows past the end of the list, should the highlight wrap?
  onChangeHighlightedItem: function onChangeHighlightedItem(item) {},
  // Called when the user highlights a new item
  onChange: function onChange(item) {},
  // Called when an item is selected
  onClose: function onClose() {},
  // Called when the popup is closed
  autoCloseOnEnter: false,

  // By default, the item as its value (ie, each item is a string.)
  renderItem: function renderItem(item) {
    return item;
  },
  itemValue: function itemValue(item) {
    return item;
  }
};